/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface OracleSwapInterface extends utils.Interface {
  functions: {
    "addLiquidity(uint256,uint256)": FunctionFragment;
    "baseBalance()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "claimFees()": FunctionFragment;
    "claimInterval()": FunctionFragment;
    "liquidityBalance(address)": FunctionFragment;
    "quoteBalance()": FunctionFragment;
    "quoteToken()": FunctionFragment;
    "reinitialize(bytes32,bytes32,address,address)": FunctionFragment;
    "removeLiquidity(uint256,uint256)": FunctionFragment;
    "swap(bool,uint256,bytes[])": FunctionFragment;
    "swapFeeBasisPoints()": FunctionFragment;
    "totalBaseFees()": FunctionFragment;
    "totalBaseLiquidity()": FunctionFragment;
    "totalQuoteFees()": FunctionFragment;
    "totalQuoteLiquidity()": FunctionFragment;
    "withdrawAll()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addLiquidity"
      | "baseBalance"
      | "baseToken"
      | "claimFees"
      | "claimInterval"
      | "liquidityBalance"
      | "quoteBalance"
      | "quoteToken"
      | "reinitialize"
      | "removeLiquidity"
      | "swap"
      | "swapFeeBasisPoints"
      | "totalBaseFees"
      | "totalBaseLiquidity"
      | "totalQuoteFees"
      | "totalQuoteLiquidity"
      | "withdrawAll"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "baseBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapFeeBasisPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBaseFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBaseLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQuoteFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalQuoteLiquidity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAll",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "baseBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quoteToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapFeeBasisPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBaseFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBaseLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQuoteFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalQuoteLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAll",
    data: BytesLike
  ): Result;

  events: {
    "AddLiquidity(address,uint256,uint256)": EventFragment;
    "RemoveLiquidity(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveLiquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface AddLiquidityEventObject {
  provider: string;
  baseAmt: BigNumber;
  quoteAmt: BigNumber;
}
export type AddLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  AddLiquidityEventObject
>;

export type AddLiquidityEventFilter = TypedEventFilter<AddLiquidityEvent>;

export interface RemoveLiquidityEventObject {
  provider: string;
  baseAmt: BigNumber;
  quoteAmt: BigNumber;
}
export type RemoveLiquidityEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RemoveLiquidityEventObject
>;

export type RemoveLiquidityEventFilter = TypedEventFilter<RemoveLiquidityEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  amountUsd: BigNumber;
  amountWei: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface OracleSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OracleSwapInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addLiquidity(
      baseAmt: PromiseOrValue<BigNumberish>,
      quoteAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    baseBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    liquidityBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseAmt: BigNumber;
        quoteAmt: BigNumber;
        lastUpdateBlockNum: BigNumber;
        lastClaimBlockNum: BigNumber;
      }
    >;

    quoteBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    quoteToken(overrides?: CallOverrides): Promise<[string]>;

    reinitialize(
      _baseTokenPriceId: PromiseOrValue<BytesLike>,
      _quoteTokenPriceId: PromiseOrValue<BytesLike>,
      _baseToken: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      baseAmt: PromiseOrValue<BigNumberish>,
      quoteAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swap(
      isBuy: PromiseOrValue<boolean>,
      size: PromiseOrValue<BigNumberish>,
      pythUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBaseFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalBaseLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQuoteFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalQuoteLiquidity(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addLiquidity(
    baseAmt: PromiseOrValue<BigNumberish>,
    quoteAmt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  baseBalance(overrides?: CallOverrides): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  claimFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

  liquidityBalance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      baseAmt: BigNumber;
      quoteAmt: BigNumber;
      lastUpdateBlockNum: BigNumber;
      lastClaimBlockNum: BigNumber;
    }
  >;

  quoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

  quoteToken(overrides?: CallOverrides): Promise<string>;

  reinitialize(
    _baseTokenPriceId: PromiseOrValue<BytesLike>,
    _quoteTokenPriceId: PromiseOrValue<BytesLike>,
    _baseToken: PromiseOrValue<string>,
    _quoteToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    baseAmt: PromiseOrValue<BigNumberish>,
    quoteAmt: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swap(
    isBuy: PromiseOrValue<boolean>,
    size: PromiseOrValue<BigNumberish>,
    pythUpdateData: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

  totalBaseFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalBaseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  totalQuoteFees(overrides?: CallOverrides): Promise<BigNumber>;

  totalQuoteLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addLiquidity(
      baseAmt: PromiseOrValue<BigNumberish>,
      quoteAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    baseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    claimFees(overrides?: CallOverrides): Promise<void>;

    claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        baseAmt: BigNumber;
        quoteAmt: BigNumber;
        lastUpdateBlockNum: BigNumber;
        lastClaimBlockNum: BigNumber;
      }
    >;

    quoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<string>;

    reinitialize(
      _baseTokenPriceId: PromiseOrValue<BytesLike>,
      _quoteTokenPriceId: PromiseOrValue<BytesLike>,
      _baseToken: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      baseAmt: PromiseOrValue<BigNumberish>,
      quoteAmt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swap(
      isBuy: PromiseOrValue<boolean>,
      size: PromiseOrValue<BigNumberish>,
      pythUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    totalBaseFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalBaseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    totalQuoteFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalQuoteLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAll(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddLiquidity(address,uint256,uint256)"(
      provider?: null,
      baseAmt?: null,
      quoteAmt?: null
    ): AddLiquidityEventFilter;
    AddLiquidity(
      provider?: null,
      baseAmt?: null,
      quoteAmt?: null
    ): AddLiquidityEventFilter;

    "RemoveLiquidity(address,uint256,uint256)"(
      provider?: null,
      baseAmt?: null,
      quoteAmt?: null
    ): RemoveLiquidityEventFilter;
    RemoveLiquidity(
      provider?: null,
      baseAmt?: null,
      quoteAmt?: null
    ): RemoveLiquidityEventFilter;

    "Transfer(address,address,uint256,uint256)"(
      from?: null,
      to?: null,
      amountUsd?: null,
      amountWei?: null
    ): TransferEventFilter;
    Transfer(
      from?: null,
      to?: null,
      amountUsd?: null,
      amountWei?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    addLiquidity(
      baseAmt: PromiseOrValue<BigNumberish>,
      quoteAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    baseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimInterval(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quoteBalance(overrides?: CallOverrides): Promise<BigNumber>;

    quoteToken(overrides?: CallOverrides): Promise<BigNumber>;

    reinitialize(
      _baseTokenPriceId: PromiseOrValue<BytesLike>,
      _quoteTokenPriceId: PromiseOrValue<BytesLike>,
      _baseToken: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      baseAmt: PromiseOrValue<BigNumberish>,
      quoteAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swap(
      isBuy: PromiseOrValue<boolean>,
      size: PromiseOrValue<BigNumberish>,
      pythUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapFeeBasisPoints(overrides?: CallOverrides): Promise<BigNumber>;

    totalBaseFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalBaseLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    totalQuoteFees(overrides?: CallOverrides): Promise<BigNumber>;

    totalQuoteLiquidity(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      baseAmt: PromiseOrValue<BigNumberish>,
      quoteAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    baseBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quoteBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quoteToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    reinitialize(
      _baseTokenPriceId: PromiseOrValue<BytesLike>,
      _quoteTokenPriceId: PromiseOrValue<BytesLike>,
      _baseToken: PromiseOrValue<string>,
      _quoteToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      baseAmt: PromiseOrValue<BigNumberish>,
      quoteAmt: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swap(
      isBuy: PromiseOrValue<boolean>,
      size: PromiseOrValue<BigNumberish>,
      pythUpdateData: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapFeeBasisPoints(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalBaseFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalBaseLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalQuoteFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalQuoteLiquidity(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
